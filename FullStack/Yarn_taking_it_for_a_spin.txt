Everyone is talking about yarn but I have always used npm. Lets take this for a spin and see what advantage I get.
// Making a sample project director and jumping into it
$ mkdir ~/Desktop/yarn
$ cd ~./Desktop/yarn

// Starting a new project
$ yarn init
=> Walks me through the creation of package.json with the following questions:
# name
# version
# description
# entry point
# repository url
# author
# licence
# private 
=> Once completed creates me a simple package.json file:
{
  "name": "testing_yarn",
  "version": "1.0.0"
   "description": "Trying to take yarn out for a spin",
  "main": "index.js",
  "author": "Asdethprime",
  "license": "MIT"
}

=> Interface certainly feels cleaner but thus far in regards to functionality nothing extra from npm ( though literally just started testing this)

################ To do list - actually try and repo and see what difference it makes 

// Adding a package 
=> Yarn shows 3 ways to add packages
yarn add [package]
yarn add [package]@[version]
yarn add [package]@[tag]
=> lets add react 
$ yarn add react
=> no lockfile found 
=> Resolving packages
=> Fetching packages
=> Linking dependencies
=> Building fresh packages
=> success saved a lock file
=> saved 4 new dependencies
=> direct dependencies:
  # react@16.7.0
=> All dependencies
  # js-token@4.0.0
  # prop-types@15.6.2
  # react@16.7.0
  # scheduler 
=> as it says on the output create a yarn.lock file 

=> added react to the dependencies

=> looking at yarn.lock file it contains:
1) Module name
2) version number
3) url from where the module was resolved 
4) SHA512 hash for integrity

  
