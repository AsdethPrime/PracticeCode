NPM [ Node Package Manager ]
----------------------------
=> Consists of 3 different components:
1) The website [ www.npmjs.com]
2) Command line interface 
3) The registry

=> npm website is used to discover packages and set up profiles.
=> cli runs on terminal allowing developers to interact with npm. 
=> registry is a large public database of JavaScript software and the meta info surrounding it. 


=> A package is a file or a directory that is described by a package.json file. 
=> A package must have a package.json file in order to be published to npm registry.
=> Packages can be scoped and unscoped. Scoped packages can in turn be private or public.
=> A module is any file or directory that is located inside node_modules directory and that can be loaded by require() function [ require() function from nodejs ]
=> To be loaded by node.js require function , a module must be one of the following:
1) a folder with a package.json file containing a main field
2) a folder with a index.js file in it
3) a JavaScript file 
=> Most npm packages are modules because they are libraries that you load with require(). However, there is no requirement that an npm package be a module. Some packages only contain an executable command line interface and don't provide a main filed for use in node programs. 



=> In the context of a node program the module is also the thing that gets loaded from a file
  var req = require('request') ;
  That above code can be interpreted as " variable req refers to the request module "

=> To use npm packages in your projects create a folder called node_modules. Simply install packages in the node_modules folder and you can use it in your code.

For example, to use the lodash package in a node.js module; simple create an index.js file in the root directory of the module and populate it as:

index.js
--------
var lodash = require('lodash');
// variable lodash refers to the model lodash

var output = lodash.without([1,2,3], 1);
console.log(output);

To run the program; simple navigate to the root directory of the module and run the following command:
$ node index.js

npm cli
--------
=> you can use npm on command line by typing npm on command line
=> running which npm ; you get a reference to /usr/local/bin/npm
=> running file /usr/local/bin/npm; you get the following output:
../lib/node_modules/npm/bin/npm-cli.js
=> Appears that npm cli actually runs a javascript file called npm-cli.js

=> Installing modules using npn
$ npm install <module-name> 
# default is local mode

=> npm has 2 modes:
1) global mode 
2) local mode

=> In global mode npm installs packages into the install prefix at prefix/lib/node_modules and bins are installed in prefix/bin
=> In local mode npm installs packages into the current project directory which defaults to the current working directory. Packages are installed into ./node_modules folder and bins are installed in ./node_modules/.bin 
=> Local mode is the default; use -g or --global on any command to operate in global mode instead. 
=> The global install location is a place for command-line utilities to put their bins in the system PATH. It is not for use with require(). If you require() a module in your code than that means it is a dependency and part of your program and should be instaled locally.  


=> npm is extremely configurable. It reads configurations from 5 places:
1) Command line switches
2) Environment variables
3) User config ( $HOME/.npmrc)
4) Global config ( ... lib/utils/config-defs.js )

// list installed packages 
$ npm ls

// search packages 
$ npm search <package-name>
$ npm search jsdom

//update npm cli
$ npm install npm -g
$ sudo -H npm install npm@latest -g

//update all outdated local packages 
$ npm update

// update all outdated global packages
$ npm update -g

// Display a set of configuration parameters that are internal to npm and are the default if nothing else is set
$ npm config ls -l 



