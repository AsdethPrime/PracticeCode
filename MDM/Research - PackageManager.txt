Did more research on making an android agent. See a lot of reference to PackageManager class. Wanted to research it so here go. 

Step 1: Android is open source - so code source code for Package Management class:

>>>>> Has a lot of comments, next step read through this and remove the comments as it starts making sense to you. 
>>>>> Removed the licence detailes
>>>>> PackageManager class is located inside the package android.content.pm
>>>>> The classes imports a whole bunch of resources
>>>>> Understanding this though I am delegating for a future purpose
>>>>> Current objective = understand the package manager class 
>>>>> Removing the imports ( 15 imports removed) 
>>>>> Things PackageManager Class has:

1. A AndroidException class called NameNotFoundException which is there to throw exception when a given package can't be found.

2. Few Integers used as flags
a. GET_ACTIVITIES 
b. GET_RECEIVERS
c. GET_SERVICES 
d. GET_PROVIDERS
e. GET_INSTRUMENTATION
f. GET_INTENT_FILTERS
g. GET_SIGNATURES 
h. GET_RESOLVED_FILTER 
i. GET_META_DATA
j. GET_GIDS
h. GET_DISABLED_COMPONENTS
i. GET_SHARED_LIBRARY-FILES 
j. GET_URI_PERMISSION_PATTERNS 
k. GET_PREMISSIONS
l. GET_UNINSTALLED_PACKAGES 
m. GET_CONFIGURATIONS
n. MATCH_DEFAULT_ONLY 
o. PERMISSION_GRANTED = 0;
p. PERMISSION_DENIED = -1;
q. SIGNATURE_MATCH = 0;
r. SIGNATURE_NEITHER_SIGNED = 1;
s. SIGNATURE_FIRST_NOT_SIGNED = -1;
t. SIGNATURE_SECOND_NOT_SIGNED = -2;
u. SIGNATURE_NO_MATCH = -3;
v. SIGNATURE_UNKNOWN_PACKAGE = -4;
w.  COMPONENT_ENABLED_STATE_DEFAULT = 0;
x. COMPONENT_ENABLED_STATE_ENABLED = 1;
y. COMPONENT_ENABLED_STATE_DISABLED = 2;
z. COMPONENT_ENABLED_STATE_DISABLED_USER = 3;
a. INSTALL_FORWARD_LOCK = 0x00000001;
b. INSTALL_REPLACE_EXISTING = 0x00000002;
c. INSTALL_ALLOW_TEST = 0x00000004;
d. INSTALL_EXTERNAL = 0x00000008;
e. INSTALL_INTERNAL = 0x00000010;
f. INSTALL_FROM_ADB = 0x00000020;
g. DONT_KILL_APP = 0x00000001;
h. INSTALL_SUCCEEDED = 1;
i. INSTALL_FAILED_ALREADY_EXISTS = -1;
j. INSTALL_FAILED_INVALID_APK = -2;
k. INSTALL_FAILED_INVALID_URI = -3;
l. INSTALL_FAILED_INSUFFICIENT_STORAGE = -4;
m. INSTALL_FAILED_DUPLICATE_PACKAGE = -5;
n. INSTALL_FAILED_NO_SHARED_USER = -6;
o. INSTALL_FAILED_UPDATE_INCOMPATIBLE = -7;
p. INSTALL_FAILED_SHARED_USER_INCOMPATIBLE = -8;
q. INSTALL_FAILED_MISSING_SHARED_LIBRARY = -9;
r. INSTALL_FAILED_REPLACE_COULDNT_DELETE = -10;
s. INSTALL_FAILED_DEXOPT = -11;
t. INSTALL_FAILED_OLDER_SDK = -12;
u. FAILED_CONFLICTING_PROVIDER = -13;
v. INSTALL_FAILED_NEWER_SDK = -14;
w. INSTALL_FAILED_TEST_ONLY = -15;
x. INSTALL_FAILED_CPU_ABI_INCOMPATIBLE = -16;
y. INSTALL_FAILED_MISSING_FEATURE = -17;
z. INSTALL_FAILED_CONTAINER_ERROR = -18;
a. INSTALL_FAILED_INVALID_INSTALL_LOCATION = -19;
b. INSTALL_FAILED_MEDIA_UNAVAILABLE = -20;
c. INSTALL_FAILED_VERIFICATION_TIMEOUT = -21;
d. INSTALL_FAILED_VERIFICATION_FAILURE = -22;
e. INSTALL_FAILED_PACKAGE_CHANGED = -23;
g. INSTALL_FAILED_UID_CHANGED = -24;
h. INSTALL_PARSE_FAILED_NOT_APK = -100;
i. INSTALL_PARSE_FAILED_BAD_MANIFEST = -101;
j. INSTALL_PARSE_FAILED_UNEXPECTED_EXCEPTION = -102;
k. INSTALL_PARSE_FAILED_NO_CERTIFICATES = -103;
l. INSTALL_PARSE_FAILED_INCONSISTENT_CERTIFICATES = -104;
m. INSTALL_PARSE_FAILED_CERTIFICATE_ENCODING = -105;
n. INSTALL_PARSE_FAILED_BAD_PACKAGE_NAME = -106;
o. INSTALL_PARSE_FAILED_BAD_SHARED_USER_ID = -107;
p. INSTALL_PARSE_FAILED_MANIFEST_MALFORMED = -108;
q. INSTALL_PARSE_FAILED_MANIFEST_EMPTY = -109;
r. INSTALL_FAILED_INTERNAL_ERROR = -110;
s. DONT_DELETE_DATA = 0x00000001;
t. DELETE_SUCCEEDED = 1;
u. DELETE_FAILED_INTERNAL_ERROR = -1;
v. DELETE_FAILED_DEVICE_POLICY_MANAGER = -2;
w. MOVE_SUCCEEDED = 1;
x. MOVE_FAILED_INSUFFICIENT_STORAGE = -1;
y. MOVE_FAILED_DOESNT_EXIST = -2;
z. MOVE_FAILED_SYSTEM_PACKAGE = -3;
a. MOVE_FAILED_FORWARD_LOCKED = -4;
b. MOVE_FAILED_INVALID_LOCATION = -5;
c. MOVE_FAILED_INTERNAL_ERROR = -6;
d. MOVE_FAILED_OPERATION_PENDING = -7;
e. MOVE_INTERNAL = 0x00000001;
f. MOVE_EXTERNAL_MEDIA = 0x00000002;
g. VERIFICATION_ALLOW_WITHOUT_SUFFICIENT = 2;
h. VERIFICATION_ALLOW = 1;
i. VERIFICATION_REJECT = -1;
j. String FEATURE_AUDIO_LOW_LATENCY = "android.hardware.audio.low_latency";
k. String FEATURE_BLUETOOTH = "android.hardware.bluetooth";
l. String FEATURE_CAMERA = "android.hardware.camera";
m. String FEATURE_CAMERA_AUTOFOCUS = "android.hardware.camera.autofocus";
n. String FEATURE_CAMERA_FLASH = "android.hardware.camera.flash";
o. String FEATURE_CAMERA_FRONT = "android.hardware.camera.front";
p. String FEATURE_LOCATION = "android.hardware.location";
q. String FEATURE_LOCATION_GPS = "android.hardware.location.gps";
r. String FEATURE_LOCATION_NETWORK = "android.hardware.location.network";
s. String FEATURE_MICROPHONE = "android.hardware.microphone";
t. String FEATURE_NFC = "android.hardware.nfc";
u. String FEATURE_SENSOR_ACCELEROMETER = "android.hardware.sensor.accelerometer";
v. String FEATURE_SENSOR_BAROMETER = "android.hardware.sensor.barometer";
w. String FEATURE_SENSOR_COMPASS = "android.hardware.sensor.compass";
x. String FEATURE_SENSOR_GYROSCOPE = "android.hardware.sensor.gyroscope";
y. String FEATURE_SENSOR_LIGHT = "android.hardware.sensor.light";
z. String FEATURE_SENSOR_PROXIMITY = "android.hardware.sensor.proximity";
a. String FEATURE_TELEPHONY = "android.hardware.telephony";
b. String FEATURE_TELEPHONY_CDMA = "android.hardware.telephony.cdma";
c. String FEATURE_TELEPHONY_GSM = "android.hardware.telephony.gsm";
d. String FEATURE_USB_HOST = "android.hardware.usb.host";
e. String FEATURE_USB_ACCESSORY = "android.hardware.usb.accessory";
f. String FEATURE_SIP = "android.software.sip";
g. String FEATURE_SIP_VOIP = "android.software.sip.voip";
h. String FEATURE_TOUCHSCREEN = "android.hardware.touchscreen";
i. String FEATURE_TOUCHSCREEN_MULTITOUCH = "android.hardware.touchscreen.multitouch";
j. String FEATURE_TOUCHSCREEN_MULTITOUCH_DISTINCT = "android.hardware.touchscreen.multitouch.distinct";
k. String FEATURE_TOUCHSCREEN_MULTITOUCH_JAZZHAND = "android.hardware.touchscreen.multitouch.jazzhand";
l. String FEATURE_FAKETOUCH = "android.hardware.faketouch";
m. String FEATURE_FAKETOUCH_MULTITOUCH_DISTINCT = "android.hardware.faketouch.multitouch.distinct";
n. String FEATURE_FAKETOUCH_MULTITOUCH_JAZZHAND = "android.hardware.faketouch.multitouch.jazzhand";
o. String FEATURE_SCREEN_PORTRAIT = "android.hardware.screen.portrait";
p. String FEATURE_SCREEN_LANDSCAPE = "android.hardware.screen.landscape";
q. String FEATURE_LIVE_WALLPAPER = "android.software.live_wallpaper";
r. String FEATURE_WIFI = "android.hardware.wifi";
s. String FEATURE_WIFI_DIRECT = "android.hardware.wifi.direct";
t. String FEATURE_TELEVISION = "android.hardware.type.television";
u. String ACTION_CLEAN_EXTERNAL_STORAGE = "android.content.pm.CLEAN_EXTERNAL_STORAGE";
v. String EXTRA_VERIFICATION_URI = "android.content.pm.extra.VERIFICATION_URI";
w. String EXTRA_VERIFICATION_ID = "android.content.pm.extra.VERIFICATION_ID";
x. String EXTRA_VERIFICATION_INSTALLER_PACKAGE = "android.content.pm.extra.VERIFICATION_INSTALLER_PACKAGE";
t. String EXTRA_VERIFICATION_INSTALL_FLAGS = "android.content.pm.extra.VERIFICATION_INSTALL_FLAGS";


NOW COMES THE ABSTRACT TYPES 
1. abstract PackageInfo getPackageInfo(String packageName, int flags) throws NameNotFoundException;
2. abstract String[] currentToCanonicalPackageNames(String[] names);
3. abstract String[] canonicalToCurrentPackageNames(String[] names);
4. abstract Intent getLaunchIntentForPackage(String packageName);
5. abstract int[] getPackageGids(String packageName) throws NameNotFoundException;
6. abstract PermissionInfo getPermissionInfo(String name, int flags) throws NameNotFoundException;
7. abstract List<PermissionInfo> queryPermissionsByGroup(String group, int flags) throws NameNotFoundException;
8. abstract PermissionGroupInfo getPermissionGroupInfo(String name, int flags) throws NameNotFoundException;
9. abstract List<PermissionGroupInfo> getAllPermissionGroups(int flags);
10. abstract ApplicationInfo getApplicationInfo(String packageName,int flags) throws NameNotFoundException;
11. abstract ActivityInfo getActivityInfo(ComponentName component,int flags) throws NameNotFoundException;
12. abstract ActivityInfo getReceiverInfo(ComponentName component,int flags) throws NameNotFoundException;
13. abstract ServiceInfo getServiceInfo(ComponentName component, int flags) throws NameNotFoundException;
14. abstract ProviderInfo getProviderInfo(ComponentName component,int flags) throws NameNotFoundException;
15. abstract List<PackageInfo> getInstalledPackages(int flags);
16. abstract int checkPermission(String permName, String pkgName);
17. abstract boolean addPermission(PermissionInfo info);
18. abstract boolean addPermissionAsync(PermissionInfo info);
19. abstract void removePermission(String name);
20. abstract void grantPermission(String packageName, String permissionName);
21. abstract void revokePermission(String packageName, String permissionName);
22. abstract int checkSignatures(String pkg1, String pkg2);
23. abstract int checkSignatures(int uid1, int uid2);
24. abstract String[] getPackagesForUid(int uid);
25. abstract String getNameForUid(int uid);
26. abstract int getUidForSharedUser(String sharedUserName) throws NameNotFoundException;
27. abstract List<ApplicationInfo> getInstalledApplications(int flags);
28. abstract String[] getSystemSharedLibraryNames();
29. abstract FeatureInfo[] getSystemAvailableFeatures();
30. abstract boolean hasSystemFeature(String name);
31. abstract ResolveInfo resolveActivity(Intent intent, int flags);
32. abstract List<ResolveInfo> queryIntentActivities(Intent intent, int flags);
33. abstract List<ResolveInfo> queryIntentActivityOptions(ComponentName caller, Intent[] specifics, Intent intent, int flags);
34. abstract List<ResolveInfo> queryBroadcastReceivers(Intent intent,int flags);
35. abstract ResolveInfo resolveService(Intent intent, int flags);
36. abstract List<ResolveInfo> queryIntentServices(Intent intent, flags);
37. abstract ProviderInfo resolveContentProvider(String name,int flags);
38. abstract List<ProviderInfo> queryContentProviders(String processName, int uid, int flags);
39. abstract InstrumentationInfo getInstrumentationInfo(ComponentName className, int flags) throws NameNotFoundException;
40. abstract List<InstrumentationInfo> queryInstrumentation(String targetPackage, int flags);
41. abstract Drawable getDrawable(String packageName, int resid,ApplicationInfo appInfo);
42. abstract Drawable getActivityIcon(ComponentName activityName) throws NameNotFoundException;
43. abstract Drawable getActivityIcon(Intent intent) throws NameNotFoundException;
44. abstract Drawable getDefaultActivityIcon();
45. abstract Drawable getApplicationIcon(ApplicationInfo info);
46. abstract Drawable getApplicationIcon(String packageName) throws NameNotFoundException;
47. abstract Drawable getActivityLogo(ComponentName activityName) throws NameNotFoundException;
48. abstract Drawable getActivityLogo(Intent intent) throws NameNotFoundException;
49. abstract Drawable getApplicationLogo(ApplicationInfo info);
50. abstract Drawable getApplicationLogo(String packageName)throws NameNotFoundException;
52. abstract CharSequence getText(String packageName, int resid,ApplicationInfo appInfo);
53. abstract XmlResourceParser getXml(String packageName, int resid,ApplicationInfo appInfo);
54. abstract CharSequence getApplicationLabel(ApplicationInfo info);
55. abstract Resources getResourcesForActivity(ComponentName activityName) throws NameNotFoundException;
56. abstract Resources getResourcesForApplication(ApplicationInfo app) throws NameNotFoundException;
57. abstract Resources getResourcesForApplication(String appPackageName) throws NameNotFoundException;
58. PackageInfo getPackageArchiveInfo(String archiveFilePath, int flags)
59. abstract void installPackage(Uri packageURI, IPackageInstallObserver observer, int flags,String installerPackageName);
60. abstract void installPackageWithVerification(Uri packageURI, IPackageInstallObserver observer, int flags, String installerPackageName,Uri verificationURI, ManifestDigest manifestDigest,ContainerEncryptionParams encryptionParams);
61. abstract void verifyPendingInstall(int id, int verificationCode);
62. abstract void setInstallerPackageName(String targetPackage,String installerPackageName);
63.  abstract void deletePackage(String packageName, IPackageDeleteObserver observer, int flags);
64. abstract String getInstallerPackageName(String packageName);
65. abstract void clearApplicationUserData(String packageName,IPackageDataObserver observer);
66. abstract void deleteApplicationCacheFiles(String packageName,IPackageDataObserver observer);
67. abstract void freeStorageAndNotify(long freeStorageSize, IPackageDataObserver observer);
68. abstract void freeStorage(long freeStorageSize, IntentSender pi);
69. abstract void getPackageSizeInfo(String packageName,IPackageStatsObserver observer);
70. abstract void addPackageToPreferred(String packageName);
71. abstract List<PackageInfo> getPreferredPackages(int flags);
72. abstract void clearPackagePreferredActivities(String packageName);
73. abstract int getPreferredActivities(List<IntentFilter> outFilters,List<ComponentName> outActivities, String packageName);
74. abstract void setComponentEnabledSetting(ComponentName componentName,int newState, int flags);
75. abstract int getComponentEnabledSetting(ComponentName componentName);
76. abstract void setApplicationEnabledSetting(String packageName, int newState, int flags);
78. abstract int getApplicationEnabledSetting(String packageName);
79. abstract boolean isSafeMode();
80. abstract void movePackage(String packageName, IPackageMoveObserver observer, int flags);
81. abstract UserInfo createUser(String name, int flags);
82. abstract List<UserInfo> getUsers();
83. abstract boolean removeUser(int id);
84. abstract void updateUserName(int id, String name);
85. abstract void updateUserFlags(int id, int flags);
86. abstract UserInfo getUser(int userId);
87. abstract VerifierDeviceIdentity getVerifierDeviceIdentity();
88. String getDataDirForUser(int userId, String packageName) 


