To use a http server a cliane must:
const http = require('http');

HTTP message headers are represented in a JSON style key-value pair object
{
'content-lenght': 123,
'content-type': 'text/plain',
'connection': 'keep-alive',
'host' : 'mysite.com',
'accept': '*/*'
}

Node.js HTTP API is very low level. It deals with stream handling and message parsing only. It parses a message into headers and body but it does not parse the actual headers or the body. 

The raw headers as they are received are retained in rawHeaders property, which is an array containing multple key-value pairs. 

http.Agent
-----------
http.Agent is responsible for managing connection persistence and reuse for http clients. http.Agent maintains a queie of pending requests for a given host and port, resuing a single socket connection for each until the queue is empty. When queue is empty, the socket is either destroyed or pooled depending on the keepAlive option. 

Pooled connections have TCP Keep-Alive enabled for them, but servers may still close idle connection in which case they will be removed from pool and a new connection will be made when a new HTTP request is made for that host and port. 

Servers may also refuse to allow multiple requests over the same connection, in which case the connection will be remade for every request and cannot be pooled. The Agent will still make the request to that server but each one will occur over a new connection. 

XMLHttpRequest
--------------
The XMLHttpRequest object allows javascript to make HTTP requests and get fresh content from the server in order to update some part of the page without a full page reload. Thanks to this Ajax application were born. 

